
1) define a functional interface "First" with an abstract method "void disp1()" , default method "void disp2()" and a static method "void disp3()"

inside main function using lambda expression invoke "disp1()" and "disp2()" methods.
also invoke "disp3()" method inside main.

2) define a functional interface "Second" with an abstract method "void disp4()".

define a class Demo with main function.
inside main function create two implementations of "Second" using lambda expression and display their names.

3) define a functional interface "MyInterface" with an abstract method "void fun()"

define a class Demo with two functions "static void perform" and main.

from main function pass lambda expression, collect it in "perform" method and invoke "fun()" function.

4) define a functional interface "Calculator" with an abstract method "int multiply(int a,int b)"
define a class "CalcDemo" with main method.
inside main using lambda create an implementation of "Calculator" , invoke "multiply()" method and display its result.

5) define a class "Display" with "void disp" method. inside this method display values from 1 to 10.

create an implementation of "Runnable" using lambda expression which will invoke "disp()" method of "Display" class.

create 2 threads and pass above created "Runnable" implementation to these threads.
make sure while one thread is executing other thread will not interfere.

Answers:
//q1
package q1;
interface First
{
	void disp1();
	default void disp2()
	{
		System.out.println("default method disp2");
	}
	static void disp3()
	{
		System.out.println("static method disp3");
	}
}
public class q1 
{

	public static void main(String[] args)
	{
		First ref= ()->{System.out.println("disp1 by lambda");};
		ref.disp1();
		
		ref.disp2();
		First.disp3();

	}

}

//q2
package q1;
interface Second
{
	void disp4();
}
public class Demo 
{

	public static void main(String[] args)
	{
		Second ref1 = ()->{System.out.println("disp4 by lambada");};
		ref1.disp4();
		Second ref2 = ()->{System.out.println("disp4 by another lambada");};
		ref2.disp4();

	}

}
//q3
package q1;
interface MyInterface
{
	void fun();
}
public class Demo 
{
	static void perform(MyInterface ref)
	{
		ref.fun();
	}

	public static void main(String[] args)
	{
		
		perform(()->{System.out.println("fun from lambda");});
	}

}
//q4
package q1;
interface Calculator
{
	int multiply(int a,int b);
}
public class CalcDemo 
{
	public static void main(String[] args)
	{
		Calculator ref = (int a, int b)->{return a*b;};
		System.out.println(ref.multiply(2, 3));
	}

}
//q5
package q1;
class Display
{
	synchronized void disp()
	{
		for(int i =1;i<=10;i++)
		{
			System.out.println(i);
		}
	}
}
public class CalcDemo 
{
	public static void main(String[] args)
	{
		Display d = new Display();
		Runnable ref = ()->{d.disp();};
		
		Thread t1 = new Thread(ref);
		Thread t2 = new Thread(ref);
		t1.start();
		t2.start();
	}

}