public class Course
{
	public void start()
	{
	}
	public void stop()
	{
	}
}
now define 3 child classes 
	DACDBDACourse,MSCit and Basic

inside "DACDBDACourse" class define one more method "public void orientation()"

define one more class "CourseDemo" with main function.
inside main function
	create an array of "Course" of 3 elements.
store all the child classes objects. Traverse the array and invoke "start()" and "stop()" of all the objects. Also invoke "orientation()" method wherever object of "DACDBDACourse" is present.

Code:

public class Basic  extends Course
{
	public void start()
	{
		System.out.println("Basic Course is started");
	}
	public void stop()
	{
		System.out.println("Basic Course is stoped");
	}
}


public class Course 
{
	public void start()
	{
		System.out.println("Course is started");
	}
	public void stop()
	{
		System.out.println("Course is stoped");
	}

}


public class CourseDemo
{
	public static void perform(Course ref)
	{
		ref.start();
		if(ref instanceof DACDBDACourse)
		{
			DACDBDACourse temp = (DACDBDACourse)ref;
			temp.orientation();
		}
		ref.stop();
	}
	
	public static void main(String[] args) 
	{
		
		Course arr[] = new Course[3];
		arr[0]= new DACDBDACourse();
		arr[1]= new MSCit();
		arr[2]= new Basic();
		
		for(int i=0;i<arr.length;i++)
		{ 
			perform(arr[i]);
		}

	}
}


public class DACDBDACourse extends Course
{
	public void start()
	{
		System.out.println("DAC and DBDA Course is started");
	}
	public void stop()
	{
		System.out.println("DAC and DBDA Course is stoped");
	}
	
	public void orientation()
	{
		System.out.println("orientation of DAC and DBDA Course");
	}
}


public class DACDBDACourse extends Course
{
	public void start()
	{
		System.out.println("DAC and DBDA Course is started");
	}
	public void stop()
	{
		System.out.println("DAC and DBDA Course is stoped");
	}
	
	public void orientation()
	{
		System.out.println("orientation of DAC and DBDA Course");
	}
}
