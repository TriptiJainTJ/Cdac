public class UIComponent
{
}
public class Button extends UIComponent
{
}
public class TextField extends UIComponent
{
}
public class CheckBox extends UIComponent
{
}
public abstract class UIComponentCreator
{
	public void show(String type)
	{
		UIComponent comp=createUIComponent(type);
		add(comp);
	}
	public void add(UIComponent component)
	{
		System.out.prinlnt("Added the component\t"+component);
	}
	public abstract UIComponent createUIComponent(String type);
}

create 3 child classes of "UIComponentCreator"
	WindowsUIComponentCreator, LinuxUIComponentCreator and MacUIComponentCreator
 in all these classes "createUIComponent()" method must be defined in such a way that whatever type is passed as per this it must return a specific UIComponent. e.g. if "button" is passed , it should return "Button" class object   or if "textfield" is passed , it should return "TextField" class object.

create a class UIComponentCreatorDemo with main function
inside main function
	create objects of WindowsUIComponentCreator, LinuxUIComponentCreator and MacUIComponentCreator classes and invoke "createUIComponent()" ,"add()" and "show()" methods.

code:
package q4;

public class Button extends UIComponent
{
	public void uiComp()
	{
		System.out.println("Create UI Component");
		System.out.println("Create button");
	}

}

package q4;

public class CheckBox extends UIComponent
{
	public void uiComp()
	{
		System.out.println("Create UI Component");
		System.out.println("Create check box");
	}
}

package q4;

public class TextField extends UIComponent
{
	public void uiComp()
	{
		System.out.println("Create UI Component");
		System.out.println("Create test filed");
	}

}

package q4;

public class UIComponent 
{
	public void uiComp()
	{
		System.out.println("Create UI Component");
	}

}

package q4;

public abstract class UIComponentCreator 
{
	public void show(String type)
	{
		UIComponent comp=createUIComponent(type);
		add(comp);
	}
	public void add(UIComponent component)
	{
		System.out.println("Added the component\t"+component);
	}
	public abstract UIComponent createUIComponent(String type);

}

package q4;

public class UIComponentCreatorDemo
{

	public static void main(String[] args)
	{
		WindowsUIComponentCreator w = new WindowsUIComponentCreator();

		w.show("button");
		w.show("textfield");
		w.show("checkbox");

	}

}

package q4;

public class WindowsUIComponentCreator extends UIComponentCreator
{
	public UIComponent createUIComponent(String type) 
	{
		if("Button".equalsIgnoreCase(type))
		{
			return new Button();
		}
		
		else if("CheckBox".equalsIgnoreCase(type))
		{
			return new CheckBox();
		}
		
		else if("TextField".equalsIgnoreCase(type))
		{
			return new TextField();
		}
		
		else
		{
			return null;
		}
		
	}
	

}
