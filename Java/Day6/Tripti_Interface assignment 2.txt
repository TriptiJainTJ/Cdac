on Developer side create the following interface
	create necessary jar and docs

public interface PersistenceMechanism
{
	void writeData(String ref);
	String readData();
}


create following classes on client side

class FileSystem implements PersistenceMechanism
{
	public void writeData(String ref)
	{
		// how to write data inside FileSystem
	}
	public String readData()
	{
		// how to read data from FileSystem
	}
}

class DatabaseSystem implements PersistenceMechanism
{
	public void writeData(String ref)
	{
		// how to write data inside DatabaseSystem
	}
	public String readData()
	{
		// how to read data from DatabaseSystem
	}
}

class BigdataSystem implements Persistenceq	Mechanism
{
	public void writeData(String ref)
	{
		// how to write data inside BigdataSystem
	}
	public String readData()
	{
		// how to read data from BigdataSystem
	}
}

create one more class "Demo" and in its main function create array of "PersistenceMechanism" interface, store all the child class objects , traverse the array and invoke only "BigdataSystem" class "writeData" and "readData" methods.

Code:
//FileSystem.java
package clientpack;

import devpack.PersistenceMechanism;

public class FileSystem implements PersistenceMechanism 
{
	public void writeData(String ref)
	{
		System.out.println("Write in file system");
	}
	public String readData()
	{
		System.out.println("Read from file system");
		return null;
	}

}
//DatabaseSystem.java
package clientpack;

import devpack.PersistenceMechanism;

public class Demo 
{

	public static void main(String[] args) 
	{
		PersistenceMechanism arr[] = new PersistenceMechanism[3];
		arr[0]= new FileSystem();
		arr[1]= new DatabaseSystem();
		arr[2]= new BigdataSystem();
		
		for(int i=0;i<arr.length;i++)
		{
			arr[i].writeData("Tripti");
			arr[i].readData();
		}
	}

}
//BigdataSystem.java
package clientpack;

import devpack.PersistenceMechanism;

public class BigdataSystem implements PersistenceMechanism 
{
	public void writeData(String ref)
	{
		System.out.println("Write in Bigdata system");
	}
	public String readData()
	{
		System.out.println("Read from Bigdata system");
		return null;
	}

}
//Demo.java


package clientpack;

import devpack.PersistenceMechanism;

public class Demo 
{

	public static void main(String[] args) 
	{
		PersistenceMechanism arr[] = new PersistenceMechanism[3];
		arr[0]= new FileSystem();
		arr[1]= new DatabaseSystem();
		arr[2]= new BigdataSystem();
		
		for(int i=0;i<arr.length;i++)
		{
			arr[i].writeData("Tripti");
			arr[i].readData();
		}
	}

}
